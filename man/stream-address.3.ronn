stream-address(3) -- MA Stream address
======================================

## SYNOPSIS

`#include <caputils/address.h>`

`int stream_addr_aton(stream_addr_t*` <dst>`, const char*` <src>`, enum AddressType` <type>`, int` <flags>`)`

`int stream_addr_str(stream_addr_t*` <dst>`, const char*` <src>`, int` <flags>`)`

`const char* stream_addr_ntoa_r(const stream_addr_t* src, char* buf, size_t bytes)`

## DESCRIPTION

`stream_addr_aton` parses address in <src> and stores the result in <dst>.
<type> decides which type of address it is or if `STREAM_ADDR_GUESS` it will
guess based on prefix and content. <flags> is a bitmask, see below for values.

`stream_addr_str` reads <src> as a local filename and is the same as using type
`STREAM_ADDR_CAPFILE` with `STREAM_ADDR_LOCAL` flag.

`stream_addr_ntoa_r` converts adress in <src> to a textual representation in
buffer <dst> of size <bytes>. Return <dst> or NULL on errors.

## ADDRESS TYPES

`enum AddressType` has the following values:

  * `STREAM_ADDR_CAPFILE` file://:
    Represents a filename. It comes in two flavors: local and remote. Local
    filenames can be any path but remote filenames is limited to 22 characters.
    Usually filenames are only used in MP filters and not widely used.

  * `STREAM_ADDR_ETHERNET` eth://:
    An ethernet multicast stream in the form of NN:NN:NN:NN:NN:NN.<br>
    Both dash and colon is accepted as optional but recommended delimiter.
    Leading zero can be ignored and it recognizes double delimiters as blanks
    filled with zeroes (e.g. 01::01 is read as 01:00:00:00:00:01).

  * `STREAM_ADDR_TCP` tcp://:
    TCP ip:port

  * `STREAM_ADDR_UDP` tcp://:
    UDP ip:port

  * `STREAM_ADDR_GUESS`:
    When reading address from a string it makes a guess what kind of address
    that was passed. Ethernet takes precedence.

## ADDRESS FLAGS

  * `STREAM_ADDR_LOCAL`:
    Used to create a local capfile path.

  * `STREAM_ADDR_FLUSH`:
    Never cache anything, send data as soon as it arrives. This will have
    drastic negative effects on performance but can be useful for low-traffic
    streams when real-time data is required. Might not be implemented for all
    stream types.

## COPYRIGHT

Copyright (C) 2011-2012 David Sveningsson <dsv@bth.se>

## SEE ALSO

stream-address-get(3)
